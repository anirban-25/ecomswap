{
  "topics": [
    {
      "tid": 1,
      "topic_name": "Get started with Python",
      "subtopics": [
        {
          "subtopic_name": "The 'Hello World' Program",
          "subtopic_description": "Python is a versatile and beginner-friendly programming language that emphasizes on readability and simplicity, making it ideal for a wide range of applications. In Python, code is executed line by line without compilation beforehand, allowing for quick development and easy debugging. Let's write our first program in Python.",
          "examples": "print(\"Hello, World!\")",
          "sid": 1
        },
        {
          "subtopic_name": "Printing in Python",
          "subtopic_description": "The print() function is like a magic spell. It tells the computer to show something on the screen. Inside the print() function, we put what we want to show in the output within either single or double quotation marks.",
          "examples": "# Printing strings\nprint(\"Hello, World!\")\n# Printing numbers\nprint(42)\n# Printing floating-point numbers\nprint(3.14)",
          "sid": 2
        }
      ],
      "subtopic_nos": 2,
      "prev_subtopic_no": null,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Print your name using the print() function."
        },
        {
          "ex_no.": 2,
          "ex_question": "Print the result of adding two numbers, 7 and 3."
        }
      ]
    },
    {
      "tid": 2,
      "topic_name": "Comments in Python",
      "subtopics": [
        {
          "subtopic_name": "Single-Line",
          "subtopic_description": "Single-line comments in Python are denoted by using the hash symbol (#) followed by the comment text, and they are used to add explanatory notes or disable code temporarily.",
          "examples": "# This is a single-line comment\nprint(\"Hello, World!\")  # This comment explains the purpose of the print statement\n",
          "sid": 1
        },
        {
          "subtopic_name": "Multi-Line Comments",
          "subtopic_description": "Python does not have built-in syntax for multi-line comments like some other programming languages. However, you can achieve multi-line comments by enclosing multiple lines of text within triple quotes. Although Python treats this as a string literal, it effectively serves the purpose of multi-line comments.",
          "examples": "'''\nThis is a multi-line comment.\nIt spans across multiple lines.\n'''",
          "sid": 2
        },
        {
          "subtopic_name": "Docstrings",
          "subtopic_description": "While not technically comments, docstrings are similar and serve as documentation for modules, classes, functions, and methods. Docstrings are enclosed in triple quotes and are used to describe the purpose, usage, and behavior of the code entity they precede.",
          "examples": "def greet(name):\n\t\"\"\"\n\tThis function greets the user with the given name.\n\tArgs:\n\t\tname (str): The name of the user.\n\t\"\"\"\n\tprint(\"Hello, \" + name + \"!\")\n\t# Calling the function\ngreet(\"Alice\")",
          "sid": 3
        }
      ],
      "subtopic_nos": 3,
      "prev_subtopic_no": 2,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Use print() function to print 'python' and add comments about your understanding of python."
        },
        {
          "ex_no.": 2,
          "ex_question": "Write your name, age, area of interest and favorite programming language within multi line comments."
        }
      ]
    },

    {
      "tid": 3,
      "topic_name": "Variables and Datatypes in Python",
      "subtopics": [
        {
          "subtopic_name": "Variables",
          "subtopic_description": "In Python, variables are used to store data values. A variable is created the moment you first assign a value to it. Variable names in Python can contain letters, numbers, and underscores (_), but they cannot start with a number. Python variables are case-sensitive, meaning 'myVar', 'MyVar', and 'myvar' are all different variables. You can assign different types of data to variables, such as integers, floating-point numbers, strings, and more.",
          "examples": "x = 5  # Assigning an integer value to variable x\ny = 3.14  # Assigning a floating-point value to variable y\nname = 'John'  # Assigning a string value to variable name\nis_true = True  # Assigning a boolean value to variable is_true",
          "sid": 1
        },
        {
          "subtopic_name": "Datatypes",
          "subtopic_description": "Python has several built-in data types, including integers, floating-point numbers, strings, booleans, lists, tuples, dictionaries, and sets. Each data type has its own characteristics and methods for manipulation. Understanding data types is essential for writing efficient and error-free code in Python.",
          "examples": "# Integer\nx = 10\n# Float\ny = 3.14\n# String\nname = 'Alice'\n# Boolean\nis_true = True\n# List\nmy_list = [1, 2, 3, 4, 5]\n# Tuple\nmy_tuple = (1, 2, 3)\n# Dictionary\nmy_dict = {'name': 'John', 'age': 30}\n# Set\nmy_set = {1, 2, 3}",
          "sid": 2
        }
      ],
      "subtopic_nos": 2,
      "prev_subtopic_no": 3,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Create a variable 'age' and assign your age to it."
        },
        {
          "ex_no.": 2,
          "ex_question": "Create a variable 'pi' and assign the value of pi (3.14) to it."
        }
      ]
    },
    {
      "tid": 4,
      "topic_name": "Mathematical Operations on Integers and Floating Point Numbers",
      "subtopics": [
        {
          "subtopic_name": "Arithmetic Operations",
          "subtopic_description": "Python supports various arithmetic operations on integers and floating-point numbers. These operations include addition (+), subtraction (-), multiplication (*), division (/), modulus (%), and exponentiation (**). Arithmetic operations follow the standard mathematical rules of precedence.",
          "examples": "# Addition\nresult_addition = 10 + 5\n# Subtraction\nresult_subtraction = 10 - 5\n# Multiplication\nresult_multiplication = 10 * 5\n# Division\nresult_division = 10 / 5\n# Modulus\nresult_modulus = 10 % 3\n# Exponentiation\nresult_exponentiation = 2 ** 3\nprint('10+5=',result_addition)\nprint('10-5=',result_subtraction)\nprint('10*5=',result_multiplication)\nprint('10/5=',result_division)\nprint('10%5=',result_modulus)\nprint('2**3=',result_exponentiation)",
          "sid": 1
        },
        {
          "subtopic_name": "Mixed Operations",
          "subtopic_description": "Python allows mixing integers and floating-point numbers in arithmetic operations. When performing arithmetic operations involving both integers and floating-point numbers, the result is a floating-point number.",
          "examples": "result_mixed_1 = 10 + 3.5\nprint('10+3.5=',result_mixed_1)\nresult_mixed_2 = 10.0 * 3\nprint('10.0*3=',result_mixed_2)",
          "sid": 2
        }
      ],
      "subtopic_nos": 2,
      "prev_subtopic_no": 2,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Calculate the sum of two integers, 7 and 3."
        },
        {
          "ex_no.": 2,
          "ex_question": "Calculate the result of multiplying two floating-point numbers, 3.5 and 2.5."
        }
      ]
    },
    {
      "tid": 5,
      "topic_name": "Logical Operators",
      "subtopics": [
        {
          "subtopic_name": "Logical AND (and)",
          "subtopic_description": "The logical AND operator returns True if both operands are True; otherwise, it returns False. In Python, the logical AND operator is represented by the keyword 'and'.",
          "examples": "result_and_1 = (5 > 3) and (7 < 10)\nprint('5>3 AND 7<10: ',result_and_1)\nresult_and_2 = (5 == 5) and (6 > 10)\nprint('5==5 AND 6>10: ',result_and_2)",
          "sid": 1
        },
        {
          "subtopic_name": "Logical OR (or)",
          "subtopic_description": "The logical OR operator returns True if at least one of the operands is True; otherwise, it returns False. In Python, the logical OR operator is represented by the keyword 'or'.",
          "examples": "result_or_1 = (5 > 3) or (7 < 10)\nprint('5>3 OR 7<10: ',result_or_1)\nresult_or_2 = (5 == 5) or (6 > 10)\nprint('5==5 OR 6>10: ',result_or_2)",
          "sid": 2
        },
        {
          "subtopic_name": "Logical NOT (not)",
          "subtopic_description": "The logical NOT operator returns the negation of the operand. If the operand is True, it returns False, and if the operand is False, it returns True. In Python, the logical NOT operator is represented by the keyword 'not'.",
          "examples": "result_not_1 = not (5 > 3)\nprint('NOT 5>3?',result_not_1)\nresult_not_2 = not (5 == 5)\nprint('NOT 5=5?',result_not_2)",
          "sid": 3
        }
      ],
      "subtopic_nos": 3,
      "prev_subtopic_no": 2,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Evaluate the logical expression (3 < 5) and (7 == 7)."
        },
        {
          "ex_no.": 2,
          "ex_question": "Evaluate the logical expression (10 > 20) or (15 == 15)."
        },
        {
          "ex_no.": 3,
          "ex_question": "Evaluate the logical expression not (4 >= 5)."
        }
      ]
    },
    {
      "tid": 6,
      "topic_name": "Strings in Python",
      "subtopics": [
        {
          "subtopic_name": "String Basics",
          "subtopic_description": "In Python, a string is a sequence of characters enclosed within either single quotes (' ') or double quotes (\" \"). Strings can contain letters, numbers, symbols, and whitespace characters. Python treats strings as immutable objects, meaning their contents cannot be changed after creation.",
          "examples": "my_string = 'Hello, World!'\nanother_string = 'Python is awesome!'\nprint(my_string)\nprint(another_string)",
          "sid": 1
        },
        {
          "subtopic_name": "String Operations",
          "subtopic_description": "Python provides several operations and methods to manipulate strings. These include concatenation (joining strings), slicing (extracting portions of strings), accessing individual characters, and various methods for string manipulation such as converting case, finding substrings, and replacing characters.",
          "examples": "my_string = 'Hello, World!'\nprint(\"my_string =\", my_string)\n# String Concatenation\nfull_string = 'Hello' + ' ' + 'World!'\nprint(\"full_string =\", full_string)\n# String Slicing\nsubstring = my_string[0:5]\nprint(\"substring =\", substring)\n# Accessing Individual Characters\nfirst_char = my_string[0]\nprint(\"first_char =\", first_char)\n# String Methods\nuppercase_string = my_string.upper()\nprint(\"uppercase_string =\", uppercase_string)\nsubstring_index = my_string.find('World')\nprint(\"substring_index =\", substring_index)",
          "sid": 2
        }
      ],
      "subtopic_nos": 2,
      "prev_subtopic_no": 3,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Create a string variable 'greeting' and assign it the value 'Hello, Python'."
        },
        {
          "ex_no.": 2,
          "ex_question": "Extract the substring 'Python' from the string 'greeting'."
        }
      ]
    },
    {
      "tid": 7,
      "topic_name": "Booleans in Python",
      "subtopics": [
        {
          "subtopic_name": "Boolean Data Type",
          "subtopic_description": "In Python, the boolean data type represents one of two values: True or False. Booleans are primarily used for logical operations and flow control in Python.",
          "examples": "x = True\ny = False\nprint(x)\nprint(y)",
          "sid": 1
        },
        {
          "subtopic_name": "Boolean Operators",
          "subtopic_description": "Python provides three boolean operators: and, or, and not. These operators are used to perform logical operations on boolean values.",
          "examples": "# Logical AND\nresult_and = True and False\nprint(\"result_and =\", result_and)\n# Logical OR\nresult_or = True or False\nprint(\"result_or =\", result_or)\n# Logical NOT\nresult_not = not True\nprint(\"result_not =\", result_not)",
          "sid": 2
        }
      ],
      "subtopic_nos": 2,
      "prev_subtopic_no": 2,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Create a boolean variable 'is_raining' and assign it the value True."
        },
        {
          "ex_no.": 2,
          "ex_question": "Create a boolean variable 'is_sunny' and assign it the value False."
        },
        {
          "ex_no.": 3,
          "ex_question": "Combine the boolean variables 'is_raining' and 'is_sunny' using the logical AND operator."
        }
      ]
    },
    {
      "tid": 8,
      "topic_name": "Lists in Python",
      "subtopics": [
        {
          "subtopic_name": "Introduction to Lists",
          "subtopic_description": "A list is a collection of items in a particular order. In Python, lists are ordered, mutable (modifiable), and allow duplicate elements. Lists are defined by enclosing comma-separated values within square brackets ([]). Lists can contain elements of different data types, including integers, floats, strings, and even other lists.",
          "examples": "my_list = [1, 2, 3, 4, 5]\nprint(my_list)\nmixed_list = [1, 'hello', 3.14, True]\nprint(mixed_list)",
          "sid": 1
        },
        {
          "subtopic_name": "Accessing Elements",
          "subtopic_description": "You can access individual elements in a list by using indexing. Indexing starts at 0 for the first element and goes up to n-1 for a list of length n. Negative indexing allows you to access elements from the end of the list.",
          "examples": "my_list = [1, 2, 3, 4, 5]\n# Accessing Elements by Index\nfirst_element = my_list[0]\nprint('first element: ',first_element)\nlast_element = my_list[-1]\nprint('last element: ',last_element)\n# Slicing a List\nsubset = my_list[1:3]\nprint('1st index to 3rd index elements:', subset)",
          "sid": 2
        },
        {
          "subtopic_name": "List Operations",
          "subtopic_description": "Python provides various operations to manipulate lists. These operations include adding elements, removing elements, modifying elements, finding elements, and sorting elements.",
          "examples": "my_list = [1, 2, 3, 4, 5]\n# Adding Elements to a List\nmy_list.append(6)\nprint(my_list)\n# Removing Elements from a List\nmy_list.remove(3)\nprint(my_list)\n# Modifying Elements in a List\nmy_list[0] = 10\nprint(my_list)\n# Finding Elements in a List\nindex_of_element = my_list.index(4)\nprint(index_of_element)\n# Sorting a List\nmy_list.sort()\nprint(my_list)",
          "sid": 3
        }
      ],
      "subtopic_nos": 3,
      "prev_subtopic_no": 2,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Create a list 'fruits' containing the following items: 'apple', 'banana', 'orange', 'grape', 'kiwi'."
        },
        {
          "ex_no.": 2,
          "ex_question": "Access the second element of the list 'fruits'."
        },
        {
          "ex_no.": 3,
          "ex_question": "Add 'mango' to the end of the list 'fruits'."
        }
      ]
    },
    {
      "tid": 9,
      "topic_name": "Tuples in Python",
      "subtopics": [
        {
          "subtopic_name": "Introduction to Tuples",
          "subtopic_description": "A tuple is a collection of ordered and immutable (unchangeable) elements. In Python, tuples are defined by enclosing comma-separated values within parentheses (). Tuples can contain elements of different data types, including integers, floats, strings, and even other tuples.",
          "examples": "my_tuple = (1, 2, 3, 4, 5)\nmixed_tuple = (1, 'hello', 3.14, True)\nprint(my_tuple)\nprint(mixed_tuple)",
          "sid": 1
        },
        {
          "subtopic_name": "Accessing Elements",
          "subtopic_description": "You can access individual elements in a tuple by using indexing, similar to lists. Indexing starts at 0 for the first element and goes up to n-1 for a tuple of length n. Negative indexing allows you to access elements from the end of the tuple.",
          "examples": "my_tuple = (1, 2, 3, 4, 5)\n# Accessing Elements by Index\nfirst_element = my_tuple[0]\nprint('first element:', first_element)\nlast_element = my_tuple[-1]\nprint('last element:',last_element)",
          "sid": 2
        },
        {
          "subtopic_name": "Tuple Operations",
          "subtopic_description": "Since tuples are immutable, you cannot modify their elements or change their size after creation. However, you can perform operations such as concatenation and repetition.",
          "examples": "my_tuple = (1, 2, 3, 4, 5)\nprint(my_tuple)\n# Tuple Concatenation\nnew_tuple = my_tuple + (6, 7, 8)\nprint(new_tuple)\n# Tuple Repetition\nrepeated_tuple = (1, 2) * 3\nprint(repeated_tuple)",
          "sid": 3
        }
      ],
      "subtopic_nos": 3,
      "prev_subtopic_no": 3,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Create a tuple 'colors' containing the following items: 'red', 'green', 'blue'."
        },
        {
          "ex_no.": 2,
          "ex_question": "Access the second element of the tuple 'colors'."
        },
        {
          "ex_no.": 3,
          "ex_question": "Concatenate the tuple 'colors' with another tuple containing 'yellow' and 'orange'."
        }
      ]
    },
    {
      "tid": 10,
      "topic_name": "Sets in Python",
      "subtopics": [
        {
          "subtopic_name": "Introduction to Sets",
          "subtopic_description": "A set is an unordered collection of unique elements. In Python, sets are defined by enclosing comma-separated values within curly braces {}. Sets do not allow duplicate elements, and they are mutable (modifiable).",
          "examples": "my_set = {1, 2, 3, 4, 5}\nprint(my_set)\nmixed_set = {'apple', 3.14, True}\nprint(mixed_set)",
          "sid": 1
        },
        {
          "subtopic_name": "Operations on Sets",
          "subtopic_description": "Python provides various operations to manipulate sets. These operations include adding elements, removing elements, finding elements, and performing set operations such as union, intersection, difference, and symmetric difference.",
          "examples": "my_set = {1, 2, 3, 4, 5}\nset1={1,2,3,4,5}\nset2={2,3,4,5,6}\n# Adding Elements to a Set\nmy_set.add(6)\nprint(my_set)\n# Removing Elements from a Set\nmy_set.remove(3)\nprint(my_set)\n# Finding Elements in a Set\nelement_found = 4 in my_set\nprint(element_found)\n# Set Operations\nunion_set = set1.union(set2)\nintersection_set = set1.intersection(set2)\ndifference_set = set1.difference(set2)\nsymmetric_difference_set = set1.symmetric_difference(set2)\nprint('union set:',union_set)\nprint('intersection set:',intersection_set)\nprint('difference set:',difference_set)\nprint('symmetric difference set:',symmetric_difference_set)",
          "sid": 2
        }
      ],
      "subtopic_nos": 2,
      "prev_subtopic_no": 3,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Create a set 'letters' containing the following items: 'a', 'b', 'c', 'd', 'e'."
        },
        {
          "ex_no.": 2,
          "ex_question": "Add 'f' to the set 'letters'."
        },
        {
          "ex_no.": 3,
          "ex_question": "Check if 'g' is present in the set 'letters'."
        }
      ]
    },
    {
      "tid": 11,
      "topic_name": "Dictionaries in Python",
      "subtopics": [
        {
          "subtopic_name": "Introduction to Dictionaries",
          "subtopic_description": "A dictionary is a collection of key-value pairs, where each key is associated with a value. In Python, dictionaries are defined by enclosing comma-separated key-value pairs within curly braces {}. Keys in a dictionary must be unique and immutable, while values can be of any data type and mutable.",
          "examples": "my_dict = {'name': 'John', 'age': 30, 'city': 'New York'}\nmixed_dict = {'name': 'Alice', 'age': 25, 'is_student': True}\nprint(my_dict)\nprint(mixed_dict)",
          "sid": 1
        },
        {
          "subtopic_name": "Accessing Elements",
          "subtopic_description": "You can access individual elements in a dictionary by specifying the key associated with the value you want to retrieve. If the key is present in the dictionary, its corresponding value is returned; otherwise, a KeyError is raised.",
          "examples": "my_dict = {'name': 'John', 'age': 30, 'city': 'New York'}\n# Accessing Elements by Key\nname = my_dict['name']\nprint(name)\n# Using the get() Method\nage = my_dict.get('age')\nprint(age)",
          "sid": 2
        },
        {
          "subtopic_name": "Dictionary Operations",
          "subtopic_description": "Python provides various operations to manipulate dictionaries. These operations include adding key-value pairs, removing key-value pairs, modifying values, and accessing keys and values.",
          "examples": "my_dict = {'name': 'John', 'age': 30, 'city': 'New York'}\nprint(my_dict)\n# Adding Key-Value Pairs\nmy_dict['gender'] = 'Male'\nprint(my_dict)\n# Removing Key-Value Pairs\ndel my_dict['age']\nprint(my_dict)\n# Modifying Values\nmy_dict['name'] = 'Michael'\nprint(my_dict)\n# Accessing Keys and Values\nkeys = my_dict.keys()\nvalues = my_dict.values()\nprint(keys)\nprint(values)",
          "sid": 3
        }
      ],
      "subtopic_nos": 3,
      "prev_subtopic_no": 2,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Create a dictionary 'person' with keys 'name', 'age', and 'city', and corresponding values 'Alice', 30, and 'London' respectively."
        },
        {
          "ex_no.": 2,
          "ex_question": "Access the value corresponding to the key 'age' in the dictionary 'person'."
        },
        {
          "ex_no.": 3,
          "ex_question": "Add a new key-value pair 'gender': 'Female' to the dictionary 'person'."
        }
      ]
    },
    {
      "tid": 12,
      "topic_name": "Python if else Statements",
      "subtopics": [
        {
          "subtopic_name": "Indentation in Python",
          "subtopic_description": "In Python, indentation is crucial for indicating blocks of code. Code blocks such as those within if, else, elif, for, while, and def statements are defined by their indentation level. The standard convention in Python is to use four spaces for each indentation level.",
          "examples": "x=2\nif x%2 == 0:\n\tprint('Even')\nelse:\n\tprint('Odd')",
          "sid": 1
        },
        {
          "subtopic_name": "Else-If Ladder",
          "subtopic_description": "An else-if ladder allows you to check multiple conditions sequentially. In Python, this is achieved using the elif keyword, which stands for 'else if'. The elif statement is used to check additional conditions after the initial if statement.",
          "examples": "x=5\nif x<2:\n\tprint('Lesser Than 2')\nif x<3:\n\tprint('Lesser Than 3')\nelse:\n\tprint('None')",
          "sid": 2
        }
      ],
      "subtopic_nos": 2,
      "prev_subtopic_no": 3,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Write a Python program that checks if a number is positive, negative, or zero. Take the number as input from the user."
        },
        {
          "ex_no.": 2,
          "ex_question": "Write a Python program that calculates the grade of a student based on their marks. If marks are greater than or equal to 90, grade is 'A'. If marks are between 80 and 89, grade is 'B'. If marks are between 70 and 79, grade is 'C'. If marks are between 60 and 69, grade is 'D'. Otherwise, grade is 'F'. Take marks as input from the user."
        }
      ]
    },
    {
      "tid": 13,
      "topic_name": "Loops in Python",
      "subtopics": [
        {
          "subtopic_name": "For Loop",
          "subtopic_description": "The for loop in Python is used to iterate over a sequence (such as a list, tuple, string, or range) or any iterable object. It executes a block of code repeatedly for each item in the sequence.",
          "examples": "for i in range(1,11):\n\tprint(i)\n\tprint(i*2)",
          "sid": 1
        },
        {
          "subtopic_name": "While Loop",
          "subtopic_description": "The while loop in Python is used to repeatedly execute a block of code as long as a specified condition is true. It continues iterating until the condition becomes false.",
          "examples": "i = 1\nwhile(i<=10):\n\tprint(i)\n\tprint(i*2)\n\ti = i+1",
          "sid": 2
        },
        {
          "subtopic_name": "Loop Control Statements",
          "subtopic_description": "Python provides loop control statements such as break, continue, and pass to modify the execution of loops. These statements allow you to control the flow of the loop execution.",
          "examples": "i = 1\nwhile(i<=10):\n\tprint(i)\n\tprint(i*2)\n\tif i==5:\n\t\tbreak\n\ti = i+1",
          "sid": 3
        }
      ],
      "subtopic_nos": 3,
      "prev_subtopic_no": 2,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Write a Python program that prints all the numbers from 1 to 10 using a for loop."
        },
        {
          "ex_no.": 2,
          "ex_question": "Write a Python program that calculates the factorial of a number using a while loop. Take the number as input from the user."
        }
      ]
    },
    {
      "tid": 14,
      "topic_name": "Python Functions and Global Variables",
      "subtopics": [
        {
          "subtopic_name": "Functions in Python",
          "subtopic_description": "A function is a block of reusable code that performs a specific task. In Python, functions are defined using the def keyword followed by the function name and parentheses containing optional parameters. Functions can return values using the return statement.",
          "examples": "def calculate_average(num_list):\n\t# Calculate the average of numbers a list\n\ttotal = sum(num_list)\n\tprint('total:',total)\n\taverage = total / len(num_list)\n\tprint('average')\n\treturn average \ncalculate_average([1,2,3,4,5])",
          "sid": 1
        },
        {
          "subtopic_name": "Global Variables",
          "subtopic_description": "A global variable is a variable defined outside of any function and is accessible from anywhere within the program. In Python, global variables can be accessed, modified, and assigned new values from within functions, but you need to use the global keyword to modify global variables inside a function.",
          "examples": "global_var = 10\ndef my_function():\n\tglobal global_var\n\tglobal_var += 1\nmy_function()\nprint(global_var)",
          "sid": 2
        }
      ],
      "subtopic_nos": 2,
      "prev_subtopic_no": 3,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Write a Python function called 'calculate_area' that calculates the area of a rectangle. The function should take two parameters, 'length' and 'width', and return the area."
        },
        {
          "ex_no.": 2,
          "ex_question": "Write a Python program that demonstrates the use of a global variable. Define a global variable 'counter' with an initial value of 0. Write a function called 'increment_counter' that increments the value of 'counter' by 1 each time it is called. Call the 'increment_counter' function three times and print the value of 'counter' after each call."
        }
      ]
    },
    {
      "tid": 15,
      "topic_name": "Python Lambda Functions",
      "subtopics": [
        {
          "subtopic_name": "Lambda Functions",
          "subtopic_description": "A lambda function, also known as an anonymous function, is a small, one-line function defined using the lambda keyword. Lambda functions can take any number of arguments but can only have one expression. They are commonly used as arguments to higher-order functions like map(), filter(), and reduce().",
          "examples": "a=lambda x, y: x + y\nprint(a(2,3))",
          "sid": 1
        }
      ],
      "subtopic_nos": 1,
      "prev_subtopic_no": 2,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Write a lambda function that takes two parameters, 'x' and 'y', and returns the sum of the square of 'x' and the cube of 'y'."
        },
        {
          "ex_no.": 2,
          "ex_question": "Write a Python program that uses a lambda function to filter even numbers from a list. Take a list of integers as input from the user and use the lambda function with the filter() function to filter out the even numbers."
        }
      ]
    },
    {
      "tid": 16,
      "topic_name": "Object-Oriented Programming (OOP) in Python",
      "subtopics": [
        {
          "subtopic_name": "Classes and Objects",
          "subtopic_description": "In Python, a class is a blueprint for creating objects (instances). It defines the properties (attributes) and behaviors (methods) that all objects of the class will have. An object is an instance of a class, and it can store data (attributes) and perform actions (methods) defined by the class.",
          "examples": "class Car:\n\t# Constructor\n\tdef __init__(self, brand, model, year):\n\t\tself.brand = brand\n\t\tself.model = model\n\t\tself.year = year\n\n\t# Method\n\tdef display_info(self):\n\t\t# Code block with indentation level 1\n\t\tprint(f'The car is a {self.year} {self.brand} {self.model}.')\n# Creating an object of the Car class\nmy_car = Car('Toyota', 'Camry', 2020)\nprint(my_car)\n\n# Calling the display_info method\nmy_car.display_info()",
          "sid": 1
        },
        {
          "subtopic_name": "Inheritance",
          "subtopic_description": "Inheritance is a fundamental concept in object-oriented programming that allows a class (subclass) to inherit properties and behaviors from another class (superclass). The subclass can then extend or override the functionalities of the superclass.",
          "examples": "class ParentClass:\n\t# Constructor\n\tdef __init__(self, param1, param2):\n\t\tself.param1 = param1\n\t\tself.param2 = param2\n\t\n\t# Method\n\tdef my_method(self):\n\t\t# Code block with indentation level 1\n\t\tprint('Parent method called')\n\nclass ChildClass(ParentClass):\n\t# Constructor\n\tdef __init__(self, param1, param2, param3):\n\t\t# Call the superclass constructor\n\t\tsuper().__init__(param1, param2)\n\t\tself.param3 = param3\n\t\n\t# Method overriding\n\tdef my_method(self):\n\t\t# Code block with indentation level 1\n\t\tprint('Child method called')\n\t\tsuper().my_method()\n\n# Creating an object of the ChildClass\nchild_obj = ChildClass('param1_value', 'param2_value', 'param3_value')\n\n# Calling the my_method of ChildClass\nchild_obj.my_method()",
          "sid": 2
        },
        {
          "subtopic_name": "Encapsulation",
          "subtopic_description": "Encapsulation is the bundling of data (attributes) and methods (functions) that operate on the data into a single unit (class). It allows for the hiding of implementation details and restricting access to certain parts of the object. In Python, encapsulation can be achieved using private and protected access specifiers.",
          "examples": "class MyClass:\n\tdef __init__(self):\n\t\tself.__private_attribute = 'private'\n\t\tself._protected_attribute = 'protected'\n\n# Creating an object of MyClass\nobj = MyClass()\n\n# Accessing and displaying the attributes\nprint(obj._MyClass__private_attribute)  # Accessing private attribute\nprint(obj._protected_attribute)         # Accessing protected attribute",
          "sid": 3
        },
        {
          "subtopic_name": "Polymorphism",
          "subtopic_description": "Polymorphism is the ability of different objects to respond to the same message (method) in different ways. In Python, polymorphism is achieved through method overriding and method overloading.",
          "examples": "class MyClass:\n\tdef my_method(self):\n\t\t# Code block with indentation level 1\n\t\tprint('Statement 1')\n\nclass ChildClass(MyClass):\n\tdef my_method(self):\n\t\t# Code block with indentation level 1\n\t\tprint('Statement 2')\n\n# Creating an object of ChildClass\nchild_obj = ChildClass()\n\n# Calling the my_method of ChildClass\nchild_obj.my_method()",
          "sid": 4
        }
      ],
      "subtopic_nos": 4,
      "prev_subtopic_no": 1,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Create a Python class called 'Rectangle' to represent rectangles. Include attributes for length and width, as well as methods to calculate the area and perimeter of the rectangle."
        },
        {
          "ex_no.": 2,
          "ex_question": "Create a Python class called 'Vehicle' with attributes 'make' and 'model'. Then, create a subclass called 'Car' that inherits from 'Vehicle' and adds an additional attribute 'year' representing the year the car was manufactured. Include methods to display the make, model, and year of the car."
        }
      ]
    },
    {
      "tid": 17,
      "topic_name": "Python Modules",
      "subtopics": [
        {
          "subtopic_name": "Introduction to Modules",
          "subtopic_description": "A module is a file containing Python definitions and statements. The file name is the module name with the suffix .py appended. Modules allow you to organize your code logically and facilitate code reuse by importing functions, classes, and variables defined in other modules into your current Python script.",
          "examples": "# Suppose math_module.py contains the following code:\n# def calculate_square(x):\n#     return x ** 2\n\n#This code cannot be run on an online compiler\n #as we cannot fetch files from your local machine\n\n# Using import statement\nimport math_module\nprint(math_module.calculate_square(5))\n\n# Using from ... import statement\nfrom math_module import calculate_square\nprint(calculate_square(5))\n\n# Using from ... import * statement\nfrom math_module import *\nprint(calculate_square(5))",
          "sid": 1
        },
        {
          "subtopic_name": "Creating Modules",
          "subtopic_description": "To create a module in Python, you simply create a new Python file with a .py extension and define your functions, classes, or variables within it. You can then import this module into other Python scripts to use its functionality.",
          "examples": "#This code cannot be run on an online compiler\n #as we cannot fetch files from your local machine\ndef my_function():\n\t# Code block with indentation level 1\n\tstatement1\n\tstatement2\nclass MyClass:\n\tdef __init__(self):\n\t\t# Code block with indentation level 1\n\t\tstatement3\n\n# Demonstration\nimport module_name\n\n# Calling the function from the module\nmodule_name.my_function()\n\n# Creating an object of MyClass\nobj = module_name.MyClass()",
          "sid": 2
        },
        {
          "subtopic_name": "Using Built-in Modules",
          "subtopic_description": "Python comes with a rich collection of built-in modules that provide useful functionalities for various tasks. These modules cover areas such as file I/O, math operations, date and time manipulation, regular expressions, and more.",
          "examples": "import os\nimport math\nimport datetime\n\n# Demonstration\n# Using os module to get current working directory\ncurrent_directory = os.getcwd()\nprint('Current working directory:', current_directory)\n\n# Using math module to calculate square root\nsquare_root = math.sqrt(25)\nprint('Square root of 25:', square_root)\n\n# Using datetime module to get current date and time\ncurrent_date_time = datetime.datetime.now()\nprint('Current date and time:', current_date_time)",
          "sid": 3
        }
      ],
      "subtopic_nos": 3,
      "prev_subtopic_no": 4,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Create a Python module called 'calculator' that defines functions for basic arithmetic operations such as addition, subtraction, multiplication, and division. Import this module into another Python script and use its functions to perform arithmetic operations."
        },
        {
          "ex_no.": 2,
          "ex_question": "Create a Python module called 'utilities' that contains a function to generate a random number between two given integers. Import this module into another Python script and use the function to generate a random number."
        }
      ]
    },
    {
      "tid": 18,
      "topic_name": "Working with Dates in Python",
      "subtopics": [
        {
          "subtopic_name": "Date and Time Modules",
          "subtopic_description": "Python provides built-in modules for working with dates and times, namely datetime, time, and calendar. These modules allow you to create, manipulate, format, and perform calculations with dates and times.",
          "examples": "import datetime\nimport time\nimport calendar",
          "sid": 1
        },
        {
          "subtopic_name": "Working with datetime Module",
          "subtopic_description": "The datetime module in Python provides classes for manipulating dates and times. You can create date objects, time objects, datetime objects, and timedelta objects to represent various aspects of date and time.",
          "examples": "import datetime\n# Create a datetime object representing a specific date and time\nmy_date = datetime.datetime(2024, 4, 4, 12, 30, 0)\n# Get the current date and time\ncurrent_datetime = datetime.datetime.now()\n# Format a datetime object as a string\nformatted_date = my_date.strftime('%d-%m-%Y %H:%M:%S')\nprint(my_date)\nprint(formatted_date)\nprint('current datetime:',current_datetime)",
          "sid": 2
        },
        {
          "subtopic_name": "Common Date Operations",
          "subtopic_description": "With the datetime module, you can perform various operations on dates and times, such as arithmetic operations, extracting components (year, month, day, hour, minute, second), comparing dates, and converting between different date formats.",
          "examples": "# Arithmetic operations with timedelta\nimport datetime\ndate1 = datetime.datetime(2024, 4, 4)\ndate2 = datetime.datetime(2024, 4, 10)\ndifference = date2 - date1\nprint('difference',difference)\nmy_date = datetime.datetime(2024, 4, 4, 12, 30, 0)\nprint(my_date)\n# Extracting components of a datetime object\nyear = my_date.year\nprint(year)\nmonth = my_date.month\nprint(month)\nday = my_date.day\nprint(day)\n# Comparing dates\nif date1 < date2:\n# Code block with indentation level 1\n\tprint('Date 1 Occured before Date2')",
          "sid": 3
        }
      ],
      "subtopic_nos": 3,
      "prev_subtopic_no": 3,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Write a Python program to display the current date and time."
        },
        {
          "ex_no.": 2,
          "ex_question": "Write a Python program that takes a date as input from the user in the format 'YYYY-MM-DD' and prints the day of the week corresponding to that date."
        }
      ]
    },
    {
      "tid": 19,
      "topic_name": "Built-in Math Functions for Arrays and Pairs of Numbers",
      "subtopics": [
        {
          "subtopic_name": "Array Operations",
          "subtopic_description": "Python provides built-in functions and libraries to perform mathematical operations on arrays (lists) efficiently. These functions can operate on arrays of numbers and perform various calculations such as sum, mean, median, standard deviation, and more.",
          "examples": "import numpy as np\n# Create an array\nmy_array = np.array([1, 2, 3, 4, 5])\n# Calculate the sum of elements in the array\narray_sum = np.sum(my_array)\n# Calculate the mean of elements in the array\narray_mean = np.mean(my_array)\n# Calculate the median of elements in the array\narray_median = np.median(my_array)\n# Calculate the standard deviation of elements in the array\narray_std = np.std(my_array)\nprint(array_mean)\nprint(array_median)\nprint(array_std)",
          "sid": 1
        },
        {
          "subtopic_name": "Pairwise Operations",
          "subtopic_description": "In addition to array operations, Python also provides built-in functions for performing mathematical operations on pairs of numbers. These functions can be used to compute pairwise maximum, minimum, absolute difference, and other operations on corresponding elements of two arrays or lists.",
          "examples": "import numpy as np\n# Create two arrays\narray1 = np.array([1, 2, 3, 4, 5])\narray2 = np.array([5, 4, 3, 2, 1])\n# Compute pairwise maximum of corresponding elements\npairwise_max = np.maximum(array1, array2)\n# Compute pairwise minimum of corresponding elements\npairwise_min = np.minimum(array1, array2)\n# Compute pairwise absolute difference of corresponding elements\npairwise_abs_diff = np.abs(array1 - array2)\nprint(pairwise_abs_diff)",
          "sid": 2
        }
      ],
      "subtopic_nos": 2,
      "prev_subtopic_no": 3,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Write a Python program that takes a list of numbers as input from the user and calculates the sum, mean, and standard deviation of the numbers using built-in functions for array operations."
        },
        {
          "ex_no.": 2,
          "ex_question": "Write a Python program that takes two lists of numbers as input from the user and computes the pairwise maximum, minimum, and absolute difference of corresponding elements using built-in functions for pairwise operations."
        }
      ]
    },
    {
      "tid": 20,
      "topic_name": "Working with JSON in Python",
      "subtopics": [
        {
          "subtopic_name": "Introduction to JSON",
          "subtopic_description": "JSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write and easy for machines to parse and generate. It is commonly used for transmitting data between a server and a web application, as well as for storing configuration settings and structured data.",
          "examples": "{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}",
          "sid": 1
        },
        {
          "subtopic_name": "Working with JSON Data",
          "subtopic_description": "Python provides built-in modules for encoding and decoding JSON data. The json module allows you to serialize Python objects into JSON strings and deserialize JSON strings into Python objects.",
          "examples": "import json\n# Serialize Python object to JSON string\ndata = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\njson_string = json.dumps(data)\n# Deserialize JSON string to Python object\njson_string = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\ndata = json.loads(json_string)\nprint(data)",
          "sid": 2
        },
        {
          "subtopic_name": "Reading and Writing JSON Files",
          "subtopic_description": "You can also read and write JSON data to/from files using the json module in Python. This allows you to store structured data in a human-readable format and easily exchange data between different systems.",
          "examples": "#If you fail to run this code in the online compiler, run it in your local machine\nimport json\n# Write JSON data to a file\ndata = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\nwith open('data.json', 'w') as json_file:\n    json.dump(data, json_file)\n# Read JSON data from a file\nwith open('data.json', 'r') as json_file:\n    data = json.load(json_file)\nprint(data)",
          "sid": 3
        }
      ],
      "subtopic_nos": 3,
      "prev_subtopic_no": 2,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Write a Python program that takes user input for name, age, and city, stores the data in a dictionary, and then writes the dictionary to a JSON file."
        },
        {
          "ex_no.": 2,
          "ex_question": "Write a Python program that reads data from a JSON file, manipulates the data (e.g., adds or modifies fields), and then writes the updated data back to the JSON file."
        }
      ]
    },
    {
      "tid": 21,
      "topic_name": "Regular Expressions (Regex) in Python",
      "subtopics": [
        {
          "subtopic_name": "Introduction to Regular Expressions",
          "subtopic_description": "A regular expression, or regex, is a sequence of characters that forms a search pattern. It can be used to search, match, and manipulate text strings based on patterns. Regular expressions are widely used in text processing, data validation, and pattern matching tasks.",
          "examples": "import re\npattern = r'apple'\ntext = 'An apple a day keeps the doctor away.'\nresult = re.search(pattern, text)\nprint(result)",
          "sid": 1
        },
        {
          "subtopic_name": "Basic Patterns",
          "subtopic_description": "Basic patterns in regular expressions allow you to match specific characters or character sets within a text string. These patterns include literal characters, character classes, and special characters.",
          "examples": "import re\n# Match a literal string 'apple'\npattern1 = r'apple'\n# Match any character except newline\npattern2 = r'.pple'\n# Match digits\npattern3 = r'\\d+'\nprint(pattern1)\nprint(pattern2)\nprint(pattern3)",
          "sid": 2
        },
        {
          "subtopic_name": "Using Regex in Python",
          "subtopic_description": "Python provides a built-in re module for working with regular expressions. This module includes functions for searching, matching, and replacing text using regular expressions.",
          "examples": "import re\n# Search for a pattern in a text string\ntext = 'Favtutor is the best learning platform'\npattern = '[a-z]*'\n\nresult = re.search(pattern, text)\nprint(result)\n# Match a pattern at the beginning of a string\nresult = re.match(pattern, text)\nprint(result)\n# Find all occurrences of a pattern in a string\nresult = re.findall(pattern, text)\nprint(result)",
          "sid": 3
        }
      ],
      "subtopic_nos": 3,
      "prev_subtopic_no": 3,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Write a Python program that takes a string as input from the user and uses a regular expression to search for all occurrences of a specific pattern (e.g., words starting with 'cat')."
        },
        {
          "ex_no.": 2,
          "ex_question": "Write a Python program that reads data from a text file, searches for specific patterns using regular expressions, and prints out the matched patterns."
        }
      ]
    },
    {
      "tid": 22,
      "topic_name": "Exception Handling in Python",
      "subtopics": [
        {
          "subtopic_name": "Introduction to Exceptions",
          "subtopic_description": "An exception is an error that occurs during the execution of a program. Python uses exceptions to handle errors that occur at runtime, such as syntax errors, logical errors, and runtime errors.",
          "examples": "#An example of an error\n# SyntaxError: missing parenthesis\nprint('Hello, world!'",
          "sid": 1
        },
        {
          "subtopic_name": "try-except Block",
          "subtopic_description": "The try-except block in Python is used to handle exceptions gracefully. The code that might raise an exception is placed inside the try block, and the code to handle the exception is placed inside the except block.",
          "examples": "try:\n\t# Code that might raise an exception\n\tx = 10 / 0\n\tprint('This line will not be executed because of the exception')\nexcept ZeroDivisionError:\n\t# Code to handle the exception\n\tprint('Error: Division by zero occurred')",
          "sid": 2
        },
        {
          "subtopic_name": "Handling Specific Exceptions",
          "subtopic_description": "You can specify different except blocks to handle specific types of exceptions. This allows you to customize the exception handling based on the type of error that occurred.",
          "examples": "try:\n\t# Code that might raise an exception\n\tx = 3\n\tresult = 10 / x\n\tprint('Result:', result)\nexcept ValueError:\n\t# Code to handle ValueError\n\tprint('Error: Please enter a valid number')\nexcept ZeroDivisionError:\n\t# Code to handle ZeroDivisionError\n\tprint('Error: Division by zero occurred')",
          "sid": 3
        },
        {
          "subtopic_name": "finally Block",
          "subtopic_description": "The finally block in Python is used to execute code that must be run regardless of whether an exception occurred or not. It is often used for cleanup tasks, such as closing files or releasing resources.",
          "examples": "try:\n\t# Code that might raise an exception\n\tx = 10 / 2\n\tprint('Result:', x)\nexcept ZeroDivisionError:\n\t# Code to handle the exception\n\tprint('Error: Division by zero occurred')\nfinally:\n\t# Code to be executed regardless of whether an exception occurred\n\tprint('Finally block executed')",
          "sid": 4
        }
      ],
      "subtopic_nos": 4,
      "prev_subtopic_no": 3,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Write a Python program that takes user input for two numbers and performs division. Handle the ZeroDivisionError exception if the second number is zero and print an appropriate error message."
        },
        {
          "ex_no.": 2,
          "ex_question": "Write a Python program that reads data from a text file and handles the FileNotFoundError exception if the file does not exist."
        }
      ]
    },
    {
      "tid": 23,
      "topic_name": "File Handling in Python",
      "subtopics": [
        {
          "subtopic_name": "Opening and Closing Files",
          "subtopic_description": "Python provides built-in functions for opening, reading from, writing to, and closing files. You can open files in different modes, such as read mode ('r'), write mode ('w'), append mode ('a'), and binary mode ('b').",
          "examples": "file = open('filename.txt', 'r')\ndata = file.read()\nfile.close()\nprint(data)",
          "sid": 1
        },
        {
          "subtopic_name": "Reading from Files",
          "subtopic_description": "You can read data from a file using various methods such as read(), readline(), and readlines(). These methods allow you to read the entire contents of the file, read one line at a time, or read all lines into a list.",
          "examples": "#This code cannot be run on an online compiler\n #as we cannot fetch files from your local machine\ndata = file.read()\nline = file.readline()\nlines = file.readlines()\nprint(lines)",
          "sid": 2
        },
        {
          "subtopic_name": "Writing to Files",
          "subtopic_description": "You can write data to a file using the write() method or by using print() function with a file argument. When writing to a file, if the file does not exist, it will be created. If it already exists, its contents will be overwritten.",
          "examples": "#This code cannot be run on an online compiler\n #as we cannot fetch files from your local machine\nfile = open('filename.txt', 'w')\nfile.write('Hello, World!')\nfile.close()",
          "sid": 3
        },
        {
          "subtopic_name": "Appending to Files",
          "subtopic_description": "You can append data to a file without overwriting its existing contents by opening the file in append mode ('a'). This allows you to add new data to the end of the file.",
          "examples": "#This code cannot be run on an online compiler\n #as we cannot fetch files from your local machine\nfile = open('filename.txt', 'a')\nfile.write('New data')\nfile.close()",
          "sid": 4
        }
      ],
      "subtopic_nos": 4,
      "prev_subtopic_no": 4,
      "exercise": [
        {
          "ex_no.": 1,
          "ex_question": "Write a Python program that reads data from a text file and counts the number of words, lines, and characters in the file."
        },
        {
          "ex_no.": 2,
          "ex_question": "Write a Python program that takes user input for a string and writes the string to a text file."
        }
      ]
    }
  ]
}
