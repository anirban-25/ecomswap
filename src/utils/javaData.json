{
    "topics":[
        {
            "tid": 1,
            "topic_name": "Introduction to Java",
            "subtopics": [
              {
                "subtopic_name": "Hello World Program in Java",
                "subtopic_description": "The 'Hello, World!' program is a simple yet essential introductory program in Java. It demonstrates the basic syntax and structure of a Java program.",
                "examples": "public class HelloWorld {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Hello, World!\");\n\t}\n}",
                "sid": 1
              },
              {
                "subtopic_name": "Comments in Java",
                "subtopic_description": "Comments in Java are used to provide explanations or annotations within the code. They are ignored by the compiler and do not affect the program's execution. Java supports single-line and multi-line comments.",
                "examples": 
                  "// This is a single-line comment\n/*\n * This is a multi-line comment\n * It can span across multiple lines\n */"
                ,
                "sid": 2
              }
            ],
            "subtopic_nos": 2,
            "prev_subtopic_no": null,
            "exercise": [
              {
                "ex_no.": 1,
                "ex_question": "Write a Java program to print 'Welcome to Java!'"
              }
            ]
        },
        {
            "tid": 2,
            "topic_name": "Basic Java Syntax and Programs",
            "subtopics": [
              {
                "subtopic_name": "Variables in Java",
                "subtopic_description": "Variables in Java are containers for storing data values. They have a data type and a name. In Java, variables must be declared before they can be used.",
                "examples": "public class VariablesExample {\n\tpublic static void main(String[] args) {\n\t\t// Declaring and initializing variables\n\t\tint num = 10;\n\t\tString name = \"John\";\n\n\t\t// Printing the values of variables\n\t\tSystem.out.println(\"The value of num is: \" + num);\n\t\tSystem.out.println(\"The name is: \" + name);\n\t}\n}",
                "sid": 1
              },
              {
                "subtopic_name": "Datatypes in Java",
                "subtopic_description": "Data types specify the different sizes and values that can be stored in variables. Java has two categories of data types: primitive data types and reference data types.",
                "examples": "public class DataTypesExample {\n\tpublic static void main(String[] args) {\n\t\t// Declaring and initializing variables of different data types\n\t\tint num = 10;\n\t\tdouble pi = 3.14;\n\t\tchar letter = 'A';\n\t\tString name = \"John\";\n\n\t\t// Printing the values of variables\n\t\tSystem.out.println(\"num = \" + num);\n\t\tSystem.out.println(\"pi = \" + pi);\n\t\tSystem.out.println(\"letter = \" + letter);\n\t\tSystem.out.println(\"name = \" + name);\n\t}\n}",
                "sid": 2
              },
              {
                "subtopic_name": "Printing variables in Java",
                "subtopic_description": "Printing variables in Java can be done using the print() or println() methods of the System.out object. This allows you to display the value of variables along with other text or formatting.",
                "examples": "public class PrintingExample {\n\tpublic static void main(String[] args) {\n\t\t// Printing variables\n\t\tint num = 10;\n\t\tSystem.out.println(\"The value of num is: \" + num);\n\n\t\tString name = \"John\";\n\t\tSystem.out.println(\"Hello, \" + name + \"!\");\n\t}\n}",
                "sid": 3
              }
            ],
            "subtopic_nos": 3,
            "prev_subtopic_no": 2,
            "exercise": [
              {
                "ex_no.": 1,
                "ex_question": "Declare a variable 'age' of type int and initialize it with the value 25. Then, print the value of 'age'."
              },
              {
                "ex_no.": 2,
                "ex_question": "Declare a variable 'name' of type String and initialize it with your name. Then, print a greeting message using the 'name' variable."
              }
            ]
          },
          {
            "tid": 3,
            "topic_name": "Java Typecasting",
            "subtopics": [
              {
                "subtopic_name": "Implicit Typecasting",
                "subtopic_description": "Implicit typecasting, also known as widening conversion, is the automatic conversion of a smaller data type to a larger data type. It occurs when the destination type has a larger range than the source type.",
                "examples": "public class ImplicitTypecasting {\n\tpublic static void main(String[] args) {\n\t\tint num = 10;\n\t\tdouble doubleNum = num; // Implicit typecasting from int to double\n\n\t\tSystem.out.println(\"num = \" + num);\n\t\tSystem.out.println(\"doubleNum = \" + doubleNum);\n\t}\n}",
                "sid": 1
              },
              {
                "subtopic_name": "Explicit Typecasting",
                "subtopic_description": "Explicit typecasting, also known as narrowing conversion, is the manual conversion of a larger data type to a smaller data type. It requires a cast operator to explicitly specify the target type.",
                "examples": "public class ExplicitTypecasting {\n\tpublic static void main(String[] args) {\n\t\tdouble doubleNum = 10.5;\n\t\tint num = (int) doubleNum; // Explicit typecasting from double to int\n\n\t\tSystem.out.println(\"doubleNum = \" + doubleNum);\n\t\tSystem.out.println(\"num = \" + num);\n\t}\n}",
                "sid": 2
              },
              {
                "subtopic_name": "Typecasting between Object Types",
                "subtopic_description": "Typecasting between object types is used to convert an object of one class type to another class type. It allows you to treat an object of a superclass as an object of its subclass or vice versa.",
                "examples": "public class Animal {\n\tpublic void makeSound() {\n\t\tSystem.out.println(\"Animal makes a sound\");\n\t}\n}\n\npublic class Dog extends Animal {\n\t@Override\n\tpublic void makeSound() {\n\t\tSystem.out.println(\"Dog barks\");\n\t}\n}\n\npublic class TypecastingExample {\n\tpublic static void main(String[] args) {\n\t\tAnimal animal = new Dog(); // Upcasting\n\t\tanimal.makeSound(); // Output: Dog barks\n\n\t\tDog dog = (Dog) animal; // Downcasting\n\t\tdog.makeSound(); // Output: Dog barks\n\t}\n}",
                "sid": 3
              }
            ],
            "subtopic_nos": 3,
            "prev_subtopic_no": 3,
            "exercise": [
              {
                "ex_no.": 1,
                "ex_question": "Write a Java program that demonstrates implicit typecasting by assigning an integer value to a double variable and printing the result."
              },
              {
                "ex_no.": 2,
                "ex_question": "Write a Java program that demonstrates explicit typecasting by assigning a double value to an integer variable and printing the result."
              }
            ]
          },
          {
            "tid": 4,
            "topic_name": "Java Operators",
            "subtopics": [
              {
                "subtopic_name": "Arithmetic Operators",
                "subtopic_description": "Arithmetic operators are used to perform mathematical operations on numeric values. They include addition (+), subtraction (-), multiplication (*), division (/), and modulus (%).",
                "examples": "public class ArithmeticOperators {\n\tpublic static void main(String[] args) {\n\t\tint a = 10;\n\t\tint b = 5;\n\n\t\tint sum = a + b; // Addition\n\t\tint difference = a - b; // Subtraction\n\t\tint product = a * b; // Multiplication\n\t\tint quotient = a / b; // Division\n\t\tint remainder = a % b; // Modulus\n\n\t\tSystem.out.println(\"Sum: \" + sum);\n\t\tSystem.out.println(\"Difference: \" + difference);\n\t\tSystem.out.println(\"Product: \" + product);\n\t\tSystem.out.println(\"Quotient: \" + quotient);\n\t\tSystem.out.println(\"Remainder: \" + remainder);\n\t}\n}",
                "sid": 1
              },
              {
                "subtopic_name": "Relational Operators",
                "subtopic_description": "Relational operators are used to compare two values and return a boolean result (true or false). They include equal to (==), not equal to (!=), greater than (>), less than (<), greater than or equal to (>=), and less than or equal to (<=).",
                "examples": "public class RelationalOperators {\n\tpublic static void main(String[] args) {\n\t\tint a = 10;\n\t\tint b = 5;\n\n\t\tboolean isEqual = (a == b); // Equal to\n\t\tboolean isNotEqual = (a != b); // Not equal to\n\t\tboolean isGreater = (a > b); // Greater than\n\t\tboolean isLess = (a < b); // Less than\n\t\tboolean isGreaterOrEqual = (a >= b); // Greater than or equal to\n\t\tboolean isLessOrEqual = (a <= b); // Less than or equal to\n\n\t\tSystem.out.println(\"a == b: \" + isEqual);\n\t\tSystem.out.println(\"a != b: \" + isNotEqual);\n\t\tSystem.out.println(\"a > b: \" + isGreater);\n\t\tSystem.out.println(\"a < b: \" + isLess);\n\t\tSystem.out.println(\"a >= b: \" + isGreaterOrEqual);\n\t\tSystem.out.println(\"a <= b: \" + isLessOrEqual);\n\t}\n}",
                "sid": 2
              },
              {
                "subtopic_name": "Logical Operators",
                "subtopic_description": "Logical operators are used to perform logical operations on boolean values. They include logical AND (&&), logical OR (||), and logical NOT (!).",
                "examples": "public class LogicalOperators {\n\tpublic static void main(String[] args) {\n\t\tboolean a = true;\n\t\tboolean b = false;\n\n\t\tboolean andResult = a && b; // Logical AND\n\t\tboolean orResult = a || b; // Logical OR\n\t\tboolean notResult = !a; // Logical NOT\n\n\t\tSystem.out.println(\"a && b: \" + andResult);\n\t\tSystem.out.println(\"a || b: \" + orResult);\n\t\tSystem.out.println(\"!a: \" + notResult);\n\t}\n}",
                "sid": 3
              }
            ],
            "subtopic_nos": 3,
            "prev_subtopic_no": 3,
            "exercise": [
              {
                "ex_no.": 1,
                "ex_question": "Write a Java program that takes two integer values as input and performs arithmetic operations (addition, subtraction, multiplication, division, and modulus) on them. Print the results of each operation."
              },
              {
                "ex_no.": 2,
                "ex_question": "Write a Java program that takes two integer values as input and uses relational operators to compare them. Print the results of each comparison (equal to, not equal to, greater than, less than, greater than or equal to, and less than or equal to)."
              }
            ]
          },
          {
            "tid": 5,
            "topic_name": "Java Strings",
            "subtopics": [
              {
                "subtopic_name": "Creating Strings",
                "subtopic_description": "In Java, strings can be created using string literals or the String class constructor. String literals are enclosed in double quotes, while the String class constructor takes a string as an argument.",
                "examples": "public class StringCreation {\n\tpublic static void main(String[] args) {\n\t\t// Creating strings using string literals\n\t\tString str1 = \"Hello\";\n\t\tString str2 = \"World\";\n\n\t\t// Creating strings using the String class constructor\n\t\tString str3 = new String(\"Java\");\n\t\tString str4 = new String(\"Programming\");\n\n\t\tSystem.out.println(str1);\n\t\tSystem.out.println(str2);\n\t\tSystem.out.println(str3);\n\t\tSystem.out.println(str4);\n\t}\n}",
                "sid": 1
              },
              {
                "subtopic_name": "String Concatenation",
                "subtopic_description": "String concatenation is the process of joining two or more strings together. In Java, you can concatenate strings using the + operator or the concat() method.",
                "examples": "public class StringConcatenation {\n\tpublic static void main(String[] args) {\n\t\tString str1 = \"Hello\";\n\t\tString str2 = \"World\";\n\n\t\t// String concatenation using the + operator\n\t\tString result1 = str1 + \" \" + str2;\n\n\t\t// String concatenation using the concat() method\n\t\tString result2 = str1.concat(\" \").concat(str2);\n\n\t\tSystem.out.println(result1);\n\t\tSystem.out.println(result2);\n\t}\n}",
                "sid": 2
              },
              {
                "subtopic_name": "String Methods",
                "subtopic_description": "Java provides various built-in methods to manipulate and operate on strings. Some commonly used string methods include length(), charAt(), substring(), toLowerCase(), toUpperCase(), trim(), equals(), and compareTo().",
                "examples": "public class StringMethods {\n\tpublic static void main(String[] args) {\n\t\tString str = \"Hello, World!\";\n\n\t\tint length = str.length(); // Returns the length of the string\n\t\tchar ch = str.charAt(1); // Returns the character at the specified index\n\t\tString substring = str.substring(0, 5); // Returns a substring from the specified start and end indexes\n\t\tString lowercase = str.toLowerCase(); // Converts the string to lowercase\n\t\tString uppercase = str.toUpperCase(); // Converts the string to uppercase\n\t\tString trimmed = str.trim(); // Removes leading and trailing whitespace\n\n\t\tSystem.out.println(\"Length: \" + length);\n\t\tSystem.out.println(\"Character at index 1: \" + ch);\n\t\tSystem.out.println(\"Substring: \" + substring);\n\t\tSystem.out.println(\"Lowercase: \" + lowercase);\n\t\tSystem.out.println(\"Uppercase: \" + uppercase);\n\t\tSystem.out.println(\"Trimmed: \" + trimmed);\n\t}\n}",
                "sid": 3
              }
            ],
            "subtopic_nos": 3,
            "prev_subtopic_no": 3,
            "exercise": [
              {
                "ex_no.": 1,
                "ex_question": "Write a Java program that takes a string as input and calculates the length of the string. Print the length of the string."
              },
              {
                "ex_no.": 2,
                "ex_question": "Write a Java program that takes two strings as input and concatenates them using the + operator and the concat() method. Print the concatenated string."
              }
            ]
          },
          {
            "tid": 6,
            "topic_name": "Java Arrays",
            "subtopics": [
              {
                "subtopic_name": "Creating Arrays",
                "subtopic_description": "In Java, arrays are used to store multiple values of the same data type. Arrays can be created using the array declaration syntax, specifying the data type followed by square brackets [].",
                "examples": "public class ArrayCreation {\n\tpublic static void main(String[] args) {\n\t\t// Creating an integer array\n\t\tint[] numbers = new int[5];\n\n\t\t// Creating a string array\n\t\tString[] names = {\"John\", \"Alice\", \"Bob\"};\n\n\t\t// Creating a character array\n\t\tchar[] characters = new char[] {'a', 'b', 'c'};\n\n\t\t// Accessing array elements\n\t\tnumbers[0] = 10;\n\t\tnumbers[1] = 20;\n\t\tSystem.out.println(numbers[0]); // Output: 10\n\t\tSystem.out.println(names[1]); // Output: Alice\n\t\tSystem.out.println(characters[2]); // Output: c\n\t}\n}",
                "sid": 1
              },
              {
                "subtopic_name": "Array Operations",
                "subtopic_description": "Java provides various operations that can be performed on arrays, such as accessing elements, modifying elements, finding the length of an array, and iterating over array elements.",
                "examples": "public class ArrayOperations {\n\tpublic static void main(String[] args) {\n\t\tint[] numbers = {10, 20, 30, 40, 50};\n\n\t\t// Accessing array elements\n\t\tint firstElement = numbers[0];\n\t\tint lastElement = numbers[numbers.length - 1];\n\n\t\t// Modifying array elements\n\t\tnumbers[2] = 35;\n\n\t\t// Finding the length of an array\n\t\tint length = numbers.length;\n\n\t\t// Iterating over array elements\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tSystem.out.println(numbers[i]);\n\t\t}\n\n\t\t// Enhanced for loop (for-each loop)\n\t\tfor (int number : numbers) {\n\t\t\tSystem.out.println(number);\n\t\t}\n\t}\n}",
                "sid": 2
              },
              {
                "subtopic_name": "Multidimensional Arrays",
                "subtopic_description": "Java supports multidimensional arrays, which are arrays of arrays. The most common type of multidimensional array is a two-dimensional array, also known as a matrix.",
                "examples": "public class MultidimensionalArray {\n\tpublic static void main(String[] args) {\n\t\t// Creating a 2D array\n\t\tint[][] matrix = {\n\t\t\t{1, 2, 3},\n\t\t\t{4, 5, 6},\n\t\t\t{7, 8, 9}\n\t\t};\n\n\t\t// Accessing elements of a 2D array\n\t\tint element = matrix[1][2];\n\t\tSystem.out.println(element); // Output: 6\n\n\t\t// Iterating over a 2D array\n\t\tint rows = matrix.length;\n\t\tint columns = matrix[0].length;\n\n\t\tfor (int i = 0; i < rows; i++) {\n\t\t\tfor (int j = 0; j < columns; j++) {\n\t\t\t\tSystem.out.print(matrix[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}",
                "sid": 3
              }
            ],
            "subtopic_nos": 3,
            "prev_subtopic_no": 3,
            "exercise": [
              {
                "ex_no.": 1,
                "ex_question": "Write a Java program that creates an integer array of size 5 and initializes it with the values {10, 20, 30, 40, 50}. Print the elements of the array."
              },
              {
                "ex_no.": 2,
                "ex_question": "Write a Java program that creates a two-dimensional array (3x3) and initializes it with the values {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}. Print the elements of the array in a matrix format."
              }
            ]
          },
          {
            "tid": 7,
            "topic_name": "Conditional Statements",
            "subtopics": [
              {
                "subtopic_name": "If-Else Statement",
                "subtopic_description": "The if-else statement is used to execute a block of code if a specified condition is true, and another block of code if the condition is false. It allows you to make decisions based on two possible outcomes.",
                "examples": "public class IfElseStatement {\n\tpublic static void main(String[] args) {\n\t\tint number = 7;\n\n\t\tif (number % 2 == 0) {\n\t\t\tSystem.out.println(number + \" is even.\");\n\t\t} else {\n\t\t\tSystem.out.println(number + \" is odd.\");\n\t\t}\n\t}\n}",
                "sid": 1
              },
              {
                "subtopic_name": "If-Else-If Ladder",
                "subtopic_description": "The if-else-if ladder is used when you need to make decisions based on multiple conditions. It allows you to check multiple conditions and execute different blocks of code based on the first condition that evaluates to true.",
                "examples": "public class IfElseIfLadder {\n\tpublic static void main(String[] args) {\n\t\tint marks = 85;\n\n\t\tif (marks >= 90) {\n\t\t\tSystem.out.println(\"Grade: A\");\n\t\t} else if (marks >= 80) {\n\t\t\tSystem.out.println(\"Grade: B\");\n\t\t} else if (marks >= 70) {\n\t\t\tSystem.out.println(\"Grade: C\");\n\t\t} else if (marks >= 60) {\n\t\t\tSystem.out.println(\"Grade: D\");\n\t\t} else {\n\t\t\tSystem.out.println(\"Grade: F\");\n\t\t}\n\t}\n}",
                "sid": 2
              },
              {
                "subtopic_name": "Nested If-Else Statement",
                "subtopic_description": "Nested if-else statements are used when you need to make decisions based on multiple conditions, where one condition is nested inside another condition. It allows you to create more complex decision-making structures.",
                "examples": "public class NestedIfElseStatement {\n\tpublic static void main(String[] args) {\n\t\tint age = 25;\n\t\tboolean hasLicense = true;\n\n\t\tif (age >= 18) {\n\t\t\tif (hasLicense) {\n\t\t\t\tSystem.out.println(\"You can drive a car.\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"You need a license to drive a car.\");\n\t\t\t}\n\t\t} else {\n\t\t\tSystem.out.println(\"You are not eligible to drive a car.\");\n\t\t}\n\t}\n}",
                "sid": 3
              },
              {
                "subtopic_name": "Switch Statement",
                "subtopic_description": "The switch statement is used to execute different blocks of code based on the value of a variable or an expression. It provides a more readable and efficient way to handle multiple conditions compared to using multiple if-else statements.",
                "examples": "public class SwitchStatement {\n\tpublic static void main(String[] args) {\n\t\tint dayNumber = 3;\n\t\tString dayName;\n\n\t\tswitch (dayNumber) {\n\t\t\tcase 1:\n\t\t\t\tdayName = \"Monday\";\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tdayName = \"Tuesday\";\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tdayName = \"Wednesday\";\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tdayName = \"Thursday\";\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tdayName = \"Friday\";\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tdayName = \"Saturday\";\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\tdayName = \"Sunday\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tdayName = \"Invalid day number\";\n\t\t}\n\n\t\tSystem.out.println(\"Day name: \" + dayName);\n\t}\n}",
                "sid": 4
              },
              {
                "subtopic_name": "Ternary Operator",
                "subtopic_description": "The ternary operator is a shorthand way to write an if-else statement in a single line. It is also known as the conditional operator. It has the syntax: `condition ? expression1 : expression2`. If the condition is true, expression1 is evaluated; otherwise, expression2 is evaluated.",
                "examples": "public class TernaryOperator {\n\tpublic static void main(String[] args) {\n\t\tint age = 20;\n\t\tString status;\n\n\t\tstatus = (age >= 18) ? \"Adult\" : \"Minor\";\n\n\t\tSystem.out.println(\"Status: \" + status);\n\t}\n}",
                "sid": 5
              }
            ],
            "subtopic_nos": 5,
            "prev_subtopic_no": 3,
            "exercise": [
              {
                "ex_no.": 1,
                "ex_question": "Write a Java program that takes an integer as input and checks if it is positive, negative, or zero using an if-else statement. Print the appropriate message based on the number."
              },
              {
                "ex_no.": 2,
                "ex_question": "Write a Java program that takes a character as input and uses a switch statement to check if it is a vowel (a, e, i, o, u) or a consonant. Print the appropriate message based on the character."
              }
            ]
          },
          {
            "tid": 8,
            "topic_name": "Control Flow Structures",
            "subtopics": [
              {
                "subtopic_name": "for Loop",
                "subtopic_description": "The for loop is used to execute a block of code repeatedly for a specific number of times. It consists of three parts: initialization, condition, and increment/decrement. The loop continues until the condition becomes false.",
                "examples": "public class ForLoop {\n\tpublic static void main(String[] args) {\n\t\t// Print numbers from 1 to 5\n\t\tfor (int i = 1; i <= 5; i++) {\n\t\t\tSystem.out.println(i);\n\t\t}\n\n\t\t// Print even numbers from 0 to 10\n\t\tfor (int i = 0; i <= 10; i += 2) {\n\t\t\tSystem.out.println(i);\n\t\t}\n\t}\n}",
                "sid": 1
              },
              {
                "subtopic_name": "while Loop",
                "subtopic_description": "The while loop is used to execute a block of code repeatedly as long as a specified condition is true. The loop continues until the condition becomes false.",
                "examples": "public class WhileLoop {\n\tpublic static void main(String[] args) {\n\t\tint count = 0;\n\n\t\t// Print numbers from 0 to 4\n\t\twhile (count < 5) {\n\t\t\tSystem.out.println(count);\n\t\t\tcount++;\n\t\t}\n\n\t\t// Print numbers from 10 to 1\n\t\tint number = 10;\n\t\twhile (number >= 1) {\n\t\t\tSystem.out.println(number);\n\t\t\tnumber--;\n\t\t}\n\t}\n}",
                "sid": 2
              },
              {
                "subtopic_name": "do-while Loop",
                "subtopic_description": "The do-while loop is similar to the while loop, but it executes the code block at least once before checking the condition. The loop continues until the condition becomes false.",
                "examples": "public class DoWhileLoop {\n\tpublic static void main(String[] args) {\n\t\tint count = 0;\n\n\t\t// Print numbers from 0 to 4\n\t\tdo {\n\t\t\tSystem.out.println(count);\n\t\t\tcount++;\n\t\t} while (count < 5);\n\n\t\t// Print numbers from 10 to 1\n\t\tint number = 10;\n\t\tdo {\n\t\t\tSystem.out.println(number);\n\t\t\tnumber--;\n\t\t} while (number >= 1);\n\t}\n}",
                "sid": 3
              },
              {
                "subtopic_name": "break Statement",
                "subtopic_description": "The break statement is used to terminate a loop or switch statement prematurely. When encountered, it immediately exits the loop or switch block and transfers control to the next statement following the loop or switch.",
                "examples": "public class BreakStatement {\n\tpublic static void main(String[] args) {\n\t\t// Print numbers from 1 to 10, but stop when 5 is encountered\n\t\tfor (int i = 1; i <= 10; i++) {\n\t\t\tif (i == 5) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tSystem.out.println(i);\n\t\t}\n\n\t\t// Find the first number divisible by 7 in the range 1 to 100\n\t\tint number = 1;\n\t\twhile (number <= 100) {\n\t\t\tif (number % 7 == 0) {\n\t\t\t\tSystem.out.println(\"First number divisible by 7: \" + number);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnumber++;\n\t\t}\n\t}\n}",
                "sid": 4
              },
              {
                "subtopic_name": "continue Statement",
                "subtopic_description": "The continue statement is used to skip the current iteration of a loop and move to the next iteration. When encountered, it immediately jumps to the loop's condition check and proceeds with the next iteration.",
                "examples": "public class ContinueStatement {\n\tpublic static void main(String[] args) {\n\t\t// Print even numbers from 1 to 10\n\t\tfor (int i = 1; i <= 10; i++) {\n\t\t\tif (i % 2 != 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tSystem.out.println(i);\n\t\t}\n\n\t\t// Print numbers from 1 to 10, skipping 5\n\t\tint number = 0;\n\t\twhile (number < 10) {\n\t\t\tnumber++;\n\t\t\tif (number == 5) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tSystem.out.println(number);\n\t\t}\n\t}\n}",
                "sid": 5
              }
            ],
            "subtopic_nos": 5,
            "prev_subtopic_no": 5,
            "exercise": [
              {
                "ex_no.": 1,
                "ex_question": "Write a Java program that uses a for loop to print the multiplication table of a given number up to 10. Take the number as input from the user."
              },
              {
                "ex_no.": 2,
                "ex_question": "Write a Java program that uses a while loop to find the sum of all even numbers from 1 to a given number. Take the number as input from the user."
              }
            ]
          },
          {
            "tid": 9,
            "topic_name": "Java Functions/Methods",
            "subtopics": [
              {
                "subtopic_name": "Defining a Method",
                "subtopic_description": "In Java, a method is a block of code that performs a specific task. It is defined within a class and can be called by other parts of the program. A method has a name, return type, and optional parameters.",
                "examples": "public class MethodExample {\n\t// Method without parameters\n\tpublic static void printMessage() {\n\t\tSystem.out.println(\"Hello, World!\");\n\t}\n\n\t// Method with parameters\n\tpublic static int addNumbers(int a, int b) {\n\t\tint sum = a + b;\n\t\treturn sum;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t// Calling methods\n\t\tprintMessage();\n\t\tint result = addNumbers(5, 3);\n\t\tSystem.out.println(\"Sum: \" + result);\n\t}\n}",
                "sid": 1
              },
              {
                "subtopic_name": "Method Parameters",
                "subtopic_description": "Method parameters are variables that are passed to a method when it is called. They allow you to provide input values to the method for processing. Parameters are specified within the parentheses of the method declaration.",
                "examples": "public class MethodParameters {\n\tpublic static void greet(String name) {\n\t\tSystem.out.println(\"Hello, \" + name + \"!\");\n\t}\n\n\tpublic static int multiply(int num1, int num2) {\n\t\tint result = num1 * num2;\n\t\treturn result;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t// Calling methods with parameters\n\t\tgreet(\"John\");\n\t\tint product = multiply(4, 7);\n\t\tSystem.out.println(\"Product: \" + product);\n\t}\n}",
                "sid": 2
              },
              {
                "subtopic_name": "Method Return Types",
                "subtopic_description": "The return type of a method specifies the type of value that the method returns. It can be any valid data type, including primitives (int, double, etc.) and reference types (String, arrays, objects). If a method does not return a value, its return type is void.",
                "examples": "public class MethodReturnTypes {\n\tpublic static int getSquare(int number) {\n\t\tint square = number * number;\n\t\treturn square;\n\t}\n\n\tpublic static boolean isEven(int number) {\n\t\treturn number % 2 == 0;\n\t}\n\n\tpublic static void printMessage() {\n\t\tSystem.out.println(\"This is a void method.\");\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tint result = getSquare(5);\n\t\tSystem.out.println(\"Square: \" + result);\n\n\t\tboolean even = isEven(10);\n\t\tSystem.out.println(\"Is even? \" + even);\n\n\t\tprintMessage();\n\t}\n}",
                "sid": 3
              },
              {
                "subtopic_name": "Method Overloading",
                "subtopic_description": "Method overloading is a feature in Java that allows multiple methods to have the same name but different parameters. The methods must differ in the number, type, or order of parameters. The return type can be the same or different.",
                "examples": "public class MethodOverloading {\n\tpublic static int add(int a, int b) {\n\t\treturn a + b;\n\t}\n\n\tpublic static double add(double a, double b) {\n\t\treturn a + b;\n\t}\n\n\tpublic static int add(int a, int b, int c) {\n\t\treturn a + b + c;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tint sum1 = add(5, 3);\n\t\tSystem.out.println(\"Sum1: \" + sum1);\n\n\t\tdouble sum2 = add(2.5, 4.7);\n\t\tSystem.out.println(\"Sum2: \" + sum2);\n\n\t\tint sum3 = add(2, 4, 6);\n\t\tSystem.out.println(\"Sum3: \" + sum3);\n\t}\n}",
                "sid": 4
              }
            ],
            "subtopic_nos": 4,
            "prev_subtopic_no": 5,
            "exercise": [
              {
                "ex_no.": 1,
                "ex_question": "Write a Java method named 'calculateAverage' that takes three double parameters (num1, num2, num3) and returns the average of these numbers."
              },
              {
                "ex_no.": 2,
                "ex_question": "Write a Java method named 'isPalindrome' that takes a string parameter and returns true if the string is a palindrome (reads the same forwards and backwards), and false otherwise."
              }
            ]
          },
          {
            "tid": 10,
            "topic_name": "Recursion",
            "subtopics": [
              {
                "subtopic_name": "What is Recursion?",
                "subtopic_description": "Recursion is a programming technique where a method calls itself repeatedly until a certain condition is met. It involves breaking down a problem into smaller subproblems and solving them recursively. Recursion can be used to solve problems that can be divided into smaller, similar subproblems.",
                "examples": "public class RecursionExample {\n\tpublic static void printNumbers(int n) {\n\t\tif (n == 0) {\n\t\t\treturn;\n\t\t}\n\t\tSystem.out.println(n);\n\t\tprintNumbers(n - 1);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tprintNumbers(5);\n\t}\n}",
                "sid": 1
              },
              {
                "subtopic_name": "Recursive Function",
                "subtopic_description": "A recursive function is a function that calls itself within its own definition. It typically consists of a base case (or termination condition) that specifies when the recursion should stop, and a recursive case that reduces the problem into smaller subproblems.",
                "examples": "public class FactorialExample {\n\tpublic static int factorial(int n) {\n\t\tif (n == 0) {\n\t\t\treturn 1; // Base case\n\t\t}\n\t\treturn n * factorial(n - 1); // Recursive case\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tint result = factorial(5);\n\t\tSystem.out.println(\"Factorial of 5: \" + result);\n\t}\n}",
                "sid": 2
              },
              {
                "subtopic_name": "Advantages of Recursion",
                "subtopic_description": "Recursion offers several advantages:\n1. It allows for a more concise and elegant solution to certain problems.\n2. It can be used to solve problems that have a recursive structure or can be divided into smaller subproblems.\n3. It can make the code more readable and easier to understand for problems with a recursive nature.",
                "examples": "public class FibonacciExample {\n\tpublic static int fibonacci(int n) {\n\t\tif (n <= 1) {\n\t\t\treturn n; // Base case\n\t\t}\n\t\treturn fibonacci(n - 1) + fibonacci(n - 2); // Recursive case\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tint result = fibonacci(7);\n\t\tSystem.out.println(\"Fibonacci number at position 7: \" + result);\n\t}\n}",
                "sid": 3
              },
              {
                "subtopic_name": "Disadvantages of Recursion",
                "subtopic_description": "Recursion also has some disadvantages:\n1. Recursive function calls can be expensive in terms of memory and time complexity.\n2. If not implemented correctly, recursion can lead to infinite recursion, causing a stack overflow error.\n3. Recursive solutions may be less efficient compared to iterative solutions for some problems.",
                "examples": "public class RecursionLimitExample {\n\tpublic static int sum(int n) {\n\t\tif (n == 0) {\n\t\t\treturn 0; // Base case\n\t\t}\n\t\treturn n + sum(n - 1); // Recursive case\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t// Calling sum with a large value may result in a stack overflow error\n\t\t// int result = sum(100000);\n\t\tint result = sum(10);\n\t\tSystem.out.println(\"Sum: \" + result);\n\t}\n}",
                "sid": 4
              }
            ],
            "subtopic_nos": 4,
            "prev_subtopic_no": 4,
            "exercise": [
              {
                "ex_no.": 1,
                "ex_question": "Write a recursive Java function named 'power' that takes two integers, 'base' and 'exponent', and returns the value of 'base' raised to the power of 'exponent'."
              },
              {
                "ex_no.": 2,
                "ex_question": "Write a recursive Java function named 'sumOfDigits' that takes an integer 'num' and returns the sum of its digits."
              }
            ]
          },
          

            {
            "tid": 11,
            "topic_name": "Classes and Objects",
            "subtopics": [
                {
                "subtopic_name": "What are Classes?",
                "subtopic_description": "In Java, a class is a blueprint or template for creating objects. It defines the properties (attributes) and behaviors (methods) that an object of that class will have. A class encapsulates data and functionality into a single unit.",
                "examples": "public class Main {\n\tpublic static void main(String[] args) {\n\t\t// Creating an object of the Person class\n\t\tPerson person = new Person(\"John\", 25);\n\t\t\n\t\t// Calling methods on the object\n\t\tperson.introduce();\n\t}\n}\n\nclass Person {\n\tprivate String name;\n\tprivate int age;\n\n\tpublic Person(String name, int age) {\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n\n\tpublic void introduce() {\n\t\tSystem.out.println(\"My name is \" + name + \" and I am \" + age + \" years old.\");\n\t}\n}",
                "sid": 1
                },
                {
                "subtopic_name": "What are Objects?",
                "subtopic_description": "An object is an instance of a class. It represents a specific entity with its own unique state and behavior. Objects are created from classes using the 'new' keyword followed by a call to the class constructor.",
                "examples": "public class Main {\n\tpublic static void main(String[] args) {\n\t\t// Creating objects of the Person class\n\t\tPerson person1 = new Person(\"John\", 25);\n\t\tPerson person2 = new Person(\"Alice\", 30);\n\n\t\t// Calling methods on the objects\n\t\tperson1.introduce();\n\t\tperson2.introduce();\n\t}\n}\n\nclass Person {\n\tprivate String name;\n\tprivate int age;\n\n\tpublic Person(String name, int age) {\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n\n\tpublic void introduce() {\n\t\tSystem.out.println(\"My name is \" + name + \" and I am \" + age + \" years old.\");\n\t}\n}",
                "sid": 2
                },
                {
                "subtopic_name": "Constructors",
                "subtopic_description": "A constructor is a special method in a class that is called when an object of that class is created. It is used to initialize the object's state (i.e., set the initial values of its attributes). Constructors have the same name as the class and do not have a return type.",
                "examples": "public class Main {\n\tpublic static void main(String[] args) {\n\t\t// Creating an object of the Rectangle class\n\t\tRectangle rectangle = new Rectangle(5, 3);\n\n\t\t// Accessing object members\n\t\tint area = rectangle.getArea();\n\t\tSystem.out.println(\"Area: \" + area);\n\t}\n}\n\nclass Rectangle {\n\tprivate int length;\n\tprivate int width;\n\n\t// Constructor\n\tpublic Rectangle(int length, int width) {\n\t\tthis.length = length;\n\t\tthis.width = width;\n\t}\n\n\tpublic int getArea() {\n\t\treturn length * width;\n\t}\n}",
                "sid": 3
                },
                {
                "subtopic_name": "Accessing Object Members",
                "subtopic_description": "Object members (attributes and methods) can be accessed using the dot (.) operator. To access an attribute or invoke a method on an object, you use the object reference followed by a dot and the member name.",
                "examples": "public class Main {\n\tpublic static void main(String[] args) {\n\t\t// Creating an object of the Circle class\n\t\tCircle circle = new Circle(3.5);\n\n\t\t// Accessing object members\n\t\tdouble area = circle.getArea();\n\t\tSystem.out.println(\"Area: \" + area);\n\t}\n}\n\nclass Circle {\n\tprivate double radius;\n\n\t// Constructor\n\tpublic Circle(double radius) {\n\t\tthis.radius = radius;\n\t}\n\n\tpublic double getArea() {\n\t\treturn Math.PI * radius * radius;\n\t}\n}",
                "sid": 4
                }
            ],
            "subtopic_nos": 4,
            "prev_subtopic_no": 4,
            "exercise": [
                {
                "ex_no.": 1,
                "ex_question": "Create a class named 'Circle' with attributes 'radius' (double) and a constructor that initializes the radius. Add a method named 'getArea' that calculates and returns the area of the circle."
                },
                {
                "ex_no.": 2,
                "ex_question": "Create a class named 'Student' with attributes 'name' (String), 'grade' (int), and a constructor that initializes the name and grade. Add a method named 'displayInfo' that prints the student's name and grade."
                }
            ]
            },
            
            {
            "tid": 12,
            "topic_name": "Object-Oriented Programming",
            "subtopics": [
                {
                "subtopic_name": "Introduction to Object-Oriented Programming",
                "subtopic_description": "Object-Oriented Programming (OOP) is a programming paradigm that organizes software design around objects, which are instances of classes. OOP focuses on creating reusable code and modeling real-world entities using classes and objects.",
                "examples": "// Example of a class and object\nclass Car {\n\tprivate String brand;\n\tprivate String model;\n\tprivate int year;\n\n\tpublic Car(String brand, String model, int year) {\n\t\tthis.brand = brand;\n\t\tthis.model = model;\n\t\tthis.year = year;\n\t}\n\n\tpublic void startEngine() {\n\t\tSystem.out.println(\"The \" + brand + \" \" + model + \" engine has started.\");\n\t}\n}\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\t// Creating an object of the Car class\n\t\tCar myCar = new Car(\"Toyota\", \"Camry\", 2022);\n\n\t\t// Calling a method on the object\n\t\tmyCar.startEngine();\n\t}\n}",
                "sid": 1
                },
                {
                "subtopic_name": "Encapsulation",
                "subtopic_description": "Encapsulation is one of the fundamental principles of OOP. It involves bundling data (attributes) and methods (behavior) that operate on that data within a single unit, i.e., a class. Encapsulation also includes data hiding, which restricts direct access to the internal state of an object from outside the class.",
                "examples": "public class Main {\n\tpublic static void main(String[] args) {\n\t\t// Creating an object of the BankAccount class\n\t\tBankAccount account = new BankAccount(\"John Doe\", 1000.0);\n\n\t\t// Accessing methods of the object\n\t\taccount.deposit(500.0);\n\t\taccount.withdraw(200.0);\n\t\tSystem.out.println(\"Account balance: \" + account.getBalance());\n\t}\n}\n\nclass BankAccount {\n\tprivate String accountHolder;\n\tprivate double balance;\n\n\tpublic BankAccount(String accountHolder, double initialBalance) {\n\t\tthis.accountHolder = accountHolder;\n\t\tthis.balance = initialBalance;\n\t}\n\n\tpublic void deposit(double amount) {\n\t\tbalance += amount;\n\t}\n\n\tpublic void withdraw(double amount) {\n\t\tif (amount <= balance) {\n\t\t\tbalance -= amount;\n\t\t} else {\n\t\t\tSystem.out.println(\"Insufficient balance.\");\n\t\t}\n\t}\n\n\tpublic double getBalance() {\n\t\treturn balance;\n\t}\n}",
                "sid": 2
                },
                {
                "subtopic_name": "Inheritance",
                "subtopic_description": "Inheritance is another key concept in OOP. It allows a class to inherit properties and methods from another class, called the superclass or base class. The class that inherits is called the subclass or derived class. Inheritance promotes code reuse and allows for the creation of hierarchical relationships between classes.",
                "examples": "public class Main {\n\tpublic static void main(String[] args) {\n\t\t// Creating objects of the Dog and Cat classes\n\t\tDog dog = new Dog(\"Buddy\", 3);\n\t\tCat cat = new Cat(\"Whiskers\", 2);\n\n\t\t// Calling methods on the objects\n\t\tdog.bark();\n\t\tcat.meow();\n\t}\n}\n\nclass Animal {\n\tprotected String name;\n\tprotected int age;\n\n\tpublic Animal(String name, int age) {\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n\n\tpublic void eat() {\n\t\tSystem.out.println(name + \" is eating.\");\n\t}\n}\n\nclass Dog extends Animal {\n\tpublic Dog(String name, int age) {\n\t\tsuper(name, age);\n\t}\n\n\tpublic void bark() {\n\t\tSystem.out.println(name + \" is barking.\");\n\t}\n}\n\nclass Cat extends Animal {\n\tpublic Cat(String name, int age) {\n\t\tsuper(name, age);\n\t}\n\n\tpublic void meow() {\n\t\tSystem.out.println(name + \" is meowing.\");\n\t}\n}",
                "sid": 3
                },
                {
                "subtopic_name": "Polymorphism",
                "subtopic_description": "Polymorphism is another fundamental concept in OOP. It allows objects of different classes to be treated as objects of a common superclass. Polymorphism can be achieved through method overriding (runtime polymorphism) or method overloading (compile-time polymorphism).",
                "examples": "public class Main {\n\tpublic static void main(String[] args) {\n\t\t// Creating objects of the Circle and Rectangle classes\n\t\tShape circle = new Circle(3.5);\n\t\tShape rectangle = new Rectangle(4.0, 5.0);\n\n\t\t// Calling the overridden method on the objects\n\t\tSystem.out.println(\"Area of circle: \" + circle.getArea());\n\t\tSystem.out.println(\"Area of rectangle: \" + rectangle.getArea());\n\t}\n}\n\nclass Shape {\n\tpublic double getArea() {\n\t\treturn 0.0;\n\t}\n}\n\nclass Circle extends Shape {\n\tprivate double radius;\n\n\tpublic Circle(double radius) {\n\t\tthis.radius = radius;\n\t}\n\n\t@Override\n\tpublic double getArea() {\n\t\treturn Math.PI * radius * radius;\n\t}\n}\n\nclass Rectangle extends Shape {\n\tprivate double length;\n\tprivate double width;\n\n\tpublic Rectangle(double length, double width) {\n\t\tthis.length = length;\n\t\tthis.width = width;\n\t}\n\n\t@Override\n\tpublic double getArea() {\n\t\treturn length * width;\n\t}\n}",
                "sid": 4
                }
            ],
            "subtopic_nos": 4,
            "prev_subtopic_no": 4,
            "exercise": [
                {
                "ex_no.": 1,
                "ex_question": "Create a class hierarchy for a college management system. Create a base class 'Person' with attributes 'name' and 'age', and methods 'getName' and 'getAge'. Derive two classes 'Student' and 'Teacher' from 'Person'. Add attributes 'studentID' and 'courses' to the 'Student' class, and attributes 'teacherID' and 'department' to the 'Teacher' class. Implement appropriate constructors and methods for each class."
                },
                {
                "ex_no.": 2,
                "ex_question": "Implement a class hierarchy for a library management system. Create a base class 'Item' with attributes 'title' and 'publisher', and methods 'getTitle' and 'getPublisher'. Derive two classes 'Book' and 'Magazine' from 'Item'. Add attributes 'author' and 'ISBN' to the 'Book' class, and attributes 'issue' and 'publicationDate' to the 'Magazine' class. Implement appropriate constructors and methods for each class."
                }
            ]
            },
            {
                "tid": 13,
                "topic_name": "Exception Handling",
                "subtopics": [
                  {
                    "subtopic_name": "Introduction to Exceptions",
                    "subtopic_description": "An exception is an event that occurs during the execution of a program that disrupts the normal flow of instructions. When an exceptional condition arises, an exception is thrown, and the program transfers control to an appropriate exception handler.",
                    "examples": "public class ExceptionExample {\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tint result = 10 / 0; // Throws an ArithmeticException\n\t\t\tSystem.out.println(result);\n\t\t} catch (ArithmeticException e) {\n\t\t\tSystem.out.println(\"An arithmetic exception occurred: \" + e.getMessage());\n\t\t}\n\t}\n}",
                    "sid": 1
                  },
                  {
                    "subtopic_name": "Types of Exceptions",
                    "subtopic_description": "Java exceptions are divided into two main categories: checked exceptions and unchecked exceptions. Checked exceptions are checked at compile-time and must be handled or declared in the method signature. Unchecked exceptions, such as RuntimeException and its subclasses, are not checked at compile-time.",
                    "examples": "// Checked exception example\npublic class CheckedExceptionExample {\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tThread.sleep(1000); // Throws a checked InterruptedException\n\t\t} catch (InterruptedException e) {\n\t\t\tSystem.out.println(\"An InterruptedException occurred: \" + e.getMessage());\n\t\t}\n\t}\n}\n\n// Unchecked exception example\npublic class UncheckedExceptionExample {\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tint[] numbers = {1, 2, 3};\n\t\t\tint value = numbers[5]; // Throws an unchecked ArrayIndexOutOfBoundsException\n\t\t\tSystem.out.println(value);\n\t\t} catch (ArrayIndexOutOfBoundsException e) {\n\t\t\tSystem.out.println(\"An ArrayIndexOutOfBoundsException occurred: \" + e.getMessage());\n\t\t}\n\t}\n}",
                    "sid": 2
                  },
                  {
                    "subtopic_name": "Try-Catch Block",
                    "subtopic_description": "The try-catch block is used to handle exceptions in Java. The code that may throw an exception is placed inside the try block, and the exception handling code is written inside the catch block. If an exception occurs within the try block, the program flow is transferred to the appropriate catch block.",
                    "examples": "public class TryCatchExample {\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tint result = 10 / 0; // Throws an ArithmeticException\n\t\t\tSystem.out.println(result);\n\t\t} catch (ArithmeticException e) {\n\t\t\tSystem.out.println(\"An arithmetic exception occurred: \" + e.getMessage());\n\t\t} finally {\n\t\t\tSystem.out.println(\"Finally block executed.\");\n\t\t}\n\t}\n}",
                    "sid": 3
                  },
                  {
                    "subtopic_name": "Throwing Exceptions",
                    "subtopic_description": "In Java, you can throw exceptions explicitly using the throw keyword. This is useful when you want to indicate that an exceptional condition has occurred and transfer control to an appropriate exception handler.",
                    "examples": "public class ThrowExceptionExample {\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tint age = -5;\n\t\t\tif (age < 0) {\n\t\t\t\tthrow new IllegalArgumentException(\"Age cannot be negative.\");\n\t\t\t}\n\t\t\tSystem.out.println(\"Age: \" + age);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tSystem.out.println(\"An IllegalArgumentException occurred: \" + e.getMessage());\n\t\t}\n\t}\n}",
                    "sid": 4
                  },
                  {
                    "subtopic_name": "Custom Exceptions",
                    "subtopic_description": "Java allows you to create your own custom exceptions by extending the Exception class or one of its subclasses. Custom exceptions can be used to represent specific error conditions in your application and provide more meaningful error messages.",
                    "examples": "// Custom exception class\nclass InvalidAgeException extends Exception {\n\tpublic InvalidAgeException(String message) {\n\t\tsuper(message);\n\t}\n}\n\n// Usage of custom exception\npublic class CustomExceptionExample {\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tint age = -5;\n\t\t\tif (age < 0) {\n\t\t\t\tthrow new InvalidAgeException(\"Age cannot be negative.\");\n\t\t\t}\n\t\t\tSystem.out.println(\"Age: \" + age);\n\t\t} catch (InvalidAgeException e) {\n\t\t\tSystem.out.println(\"An InvalidAgeException occurred: \" + e.getMessage());\n\t\t}\n\t}\n}",
                    "sid": 5
                  }
                ],
                "subtopic_nos": 5,
                "prev_subtopic_no": 4,
                "exercise": [
                  {
                    "ex_no.": 1,
                    "ex_question": "Write a Java program that prompts the user to enter two integers and performs division. Handle the ArithmeticException if the user enters 0 as the divisor and display an appropriate error message."
                  },
                  {
                    "ex_no.": 2,
                    "ex_question": "Create a custom exception class called 'NegativeNumberException' that extends the Exception class. Write a Java program that accepts an integer from the user and throws a NegativeNumberException if the input is negative. Handle the exception and display an appropriate error message."
                  }
                ]
              },
              {
                "tid": 14,
                "topic_name": "Java Collection Framework",
                "subtopics": [
                  {
                    "subtopic_name": "Introduction to Collection Framework",
                    "subtopic_description": "The Java Collection Framework is a set of classes and interfaces that provide a unified architecture for representing and manipulating collections of objects. It provides a standard way to store and retrieve groups of objects, allowing developers to write more efficient and reusable code.",
                    "examples": "import java.util.ArrayList;\n\npublic class CollectionExample {\n\tpublic static void main(String[] args) {\n\t\t// Creating an ArrayList\n\t\tArrayList<String> list = new ArrayList<>();\n\n\t\t// Adding elements to the ArrayList\n\t\tlist.add(\"Apple\");\n\t\tlist.add(\"Banana\");\n\t\tlist.add(\"Orange\");\n\n\t\t// Iterating over the ArrayList\n\t\tfor (String fruit : list) {\n\t\t\tSystem.out.println(fruit);\n\t\t}\n\t}\n}",
                    "sid": 1
                  },
                  {
                    "subtopic_name": "List Interface",
                    "subtopic_description": "The List interface in Java Collection Framework represents an ordered collection of elements. It allows duplicate elements and provides index-based access to elements. The most commonly used implementation classes of the List interface are ArrayList and LinkedList.",
                    "examples": "import java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class ListExample {\n\tpublic static void main(String[] args) {\n\t\t// Creating an ArrayList\n\t\tArrayList<Integer> arrayList = new ArrayList<>();\n\t\tarrayList.add(10);\n\t\tarrayList.add(20);\n\t\tarrayList.add(30);\n\n\t\t// Creating a LinkedList\n\t\tLinkedList<Integer> linkedList = new LinkedList<>();\n\t\tlinkedList.add(40);\n\t\tlinkedList.add(50);\n\t\tlinkedList.add(60);\n\n\t\t// Accessing elements\n\t\tint element = arrayList.get(1);\n\t\tSystem.out.println(\"Element at index 1 in ArrayList: \" + element);\n\n\t\t// Removing an element\n\t\tlinkedList.remove(1);\n\n\t\t// Iterating over the lists\n\t\tSystem.out.println(\"ArrayList elements:\");\n\t\tfor (int num : arrayList) {\n\t\t\tSystem.out.println(num);\n\t\t}\n\n\t\tSystem.out.println(\"LinkedList elements:\");\n\t\tfor (int num : linkedList) {\n\t\t\tSystem.out.println(num);\n\t\t}\n\t}\n}",
                    "sid": 2
                  },
                  {
                    "subtopic_name": "Set Interface",
                    "subtopic_description": "The Set interface in Java Collection Framework represents a collection that does not allow duplicate elements. It models the mathematical set abstraction. The most commonly used implementation classes of the Set interface are HashSet and TreeSet.",
                    "examples": "import java.util.HashSet;\nimport java.util.TreeSet;\n\npublic class SetExample {\n\tpublic static void main(String[] args) {\n\t\t// Creating a HashSet\n\t\tHashSet<String> hashSet = new HashSet<>();\n\t\thashSet.add(\"Apple\");\n\t\thashSet.add(\"Banana\");\n\t\thashSet.add(\"Orange\");\n\t\thashSet.add(\"Apple\"); // Duplicate element, will be ignored\n\n\t\t// Creating a TreeSet\n\t\tTreeSet<String> treeSet = new TreeSet<>();\n\t\ttreeSet.add(\"Mango\");\n\t\ttreeSet.add(\"Grapes\");\n\t\ttreeSet.add(\"Pineapple\");\n\n\t\t// Iterating over the sets\n\t\tSystem.out.println(\"HashSet elements:\");\n\t\tfor (String fruit : hashSet) {\n\t\t\tSystem.out.println(fruit);\n\t\t}\n\n\t\tSystem.out.println(\"TreeSet elements:\");\n\t\tfor (String fruit : treeSet) {\n\t\t\tSystem.out.println(fruit);\n\t\t}\n\t}\n}",
                    "sid": 3
                  },
                  {
                    "subtopic_name": "Map Interface",
                    "subtopic_description": "The Map interface in Java Collection Framework represents a mapping between a key and a value. Each key is unique, and each key maps to a single value. The most commonly used implementation classes of the Map interface are HashMap and TreeMap.",
                    "examples": "import java.util.HashMap;\nimport java.util.TreeMap;\n\npublic class MapExample {\n\tpublic static void main(String[] args) {\n\t\t// Creating a HashMap\n\t\tHashMap<String, Integer> hashMap = new HashMap<>();\n\t\thashMap.put(\"John\", 25);\n\t\thashMap.put(\"Alice\", 30);\n\t\thashMap.put(\"Bob\", 35);\n\n\t\t// Creating a TreeMap\n\t\tTreeMap<String, String> treeMap = new TreeMap<>();\n\t\ttreeMap.put(\"A\", \"Apple\");\n\t\ttreeMap.put(\"B\", \"Banana\");\n\t\ttreeMap.put(\"C\", \"Cherry\");\n\n\t\t// Accessing values\n\t\tint age = hashMap.get(\"Alice\");\n\t\tSystem.out.println(\"Age of Alice: \" + age);\n\n\t\t// Iterating over the maps\n\t\tSystem.out.println(\"HashMap entries:\");\n\t\tfor (String key : hashMap.keySet()) {\n\t\t\tSystem.out.println(key + \": \" + hashMap.get(key));\n\t\t}\n\n\t\tSystem.out.println(\"TreeMap entries:\");\n\t\tfor (String key : treeMap.keySet()) {\n\t\t\tSystem.out.println(key + \": \" + treeMap.get(key));\n\t\t}\n\t}\n}",
                    "sid": 4
                  },
                  {
                    "subtopic_name": "Iterator and Comparable Interfaces",
                    "subtopic_description": "The Iterator interface in Java Collection Framework provides a way to traverse the elements of a collection. It allows you to perform operations such as accessing elements, removing elements during iteration, and checking if more elements exist. The Comparable interface is used to define the natural ordering of objects, allowing them to be sorted automatically.",
                    "examples": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Iterator;\n\npublic class IteratorComparableExample {\n\tpublic static void main(String[] args) {\n\t\t// Creating an ArrayList of integers\n\t\tArrayList<Integer> numbers = new ArrayList<>();\n\t\tnumbers.add(10);\n\t\tnumbers.add(5);\n\t\tnumbers.add(8);\n\t\tnumbers.add(2);\n\n\t\t// Using Iterator to traverse the ArrayList\n\t\tIterator<Integer> iterator = numbers.iterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tint number = iterator.next();\n\t\t\tSystem.out.println(number);\n\t\t}\n\n\t\t// Sorting the ArrayList using natural ordering (Comparable)\n\t\tCollections.sort(numbers);\n\n\t\t// Printing the sorted ArrayList\n\t\tSystem.out.println(\"Sorted ArrayList:\");\n\t\tfor (int number : numbers) {\n\t\t\tSystem.out.println(number);\n\t\t}\n\t}\n}",
                    "sid": 5
                  }
                ],
                "subtopic_nos": 5,
                "prev_subtopic_no": 5,
                "exercise": [
                  {
                    "ex_no.": 1,
                    "ex_question": "Write a Java program that creates an ArrayList of strings and performs the following operations:\n- Add five strings to the ArrayList\n- Print the size of the ArrayList\n- Remove the string at index 2\n- Check if a specific string exists in the ArrayList\n- Clear the ArrayList and verify that it is empty"
                  },
                  {
                    "ex_no.": 2,
                    "ex_question": "Write a Java program that creates a HashMap to store the names and ages of five people. Perform the following operations:\n- Add five entries (name as key, age as value) to the HashMap\n- Print the size of the HashMap\n- Retrieve and print the age of a specific person by their name\n- Remove an entry from the HashMap based on the name\n- Iterate over the HashMap and print all the entries"
                  }
                ]
              }





          
    ]
}